// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: services/sysinfo/sysinfo.proto

package sysinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysinfoClient is the client API for Sysinfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysinfoClient interface {
	GetUptime(ctx context.Context, in *GetUptimeRequest, opts ...grpc.CallOption) (*GetUptimeResponse, error)
}

type sysinfoClient struct {
	cc grpc.ClientConnInterface
}

func NewSysinfoClient(cc grpc.ClientConnInterface) SysinfoClient {
	return &sysinfoClient{cc}
}

func (c *sysinfoClient) GetUptime(ctx context.Context, in *GetUptimeRequest, opts ...grpc.CallOption) (*GetUptimeResponse, error) {
	out := new(GetUptimeResponse)
	err := c.cc.Invoke(ctx, "/services.sysinfo.Sysinfo/GetUptime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysinfoServer is the server API for Sysinfo service.
// All implementations must embed UnimplementedSysinfoServer
// for forward compatibility
type SysinfoServer interface {
	GetUptime(context.Context, *GetUptimeRequest) (*GetUptimeResponse, error)
	mustEmbedUnimplementedSysinfoServer()
}

// UnimplementedSysinfoServer must be embedded to have forward compatible implementations.
type UnimplementedSysinfoServer struct {
}

func (UnimplementedSysinfoServer) GetUptime(context.Context, *GetUptimeRequest) (*GetUptimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUptime not implemented")
}
func (UnimplementedSysinfoServer) mustEmbedUnimplementedSysinfoServer() {}

// UnsafeSysinfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysinfoServer will
// result in compilation errors.
type UnsafeSysinfoServer interface {
	mustEmbedUnimplementedSysinfoServer()
}

func RegisterSysinfoServer(s grpc.ServiceRegistrar, srv SysinfoServer) {
	s.RegisterService(&Sysinfo_ServiceDesc, srv)
}

func _Sysinfo_GetUptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUptimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysinfoServer).GetUptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.sysinfo.Sysinfo/GetUptime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysinfoServer).GetUptime(ctx, req.(*GetUptimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sysinfo_ServiceDesc is the grpc.ServiceDesc for Sysinfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sysinfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.sysinfo.Sysinfo",
	HandlerType: (*SysinfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUptime",
			Handler:    _Sysinfo_GetUptime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/sysinfo/sysinfo.proto",
}
