// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: services/secauthz/secauthz.proto

package secauthz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecauthzClient is the client API for Secauthz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecauthzClient interface {
	LookupAccountByName(ctx context.Context, in *LookupAccountByNameRequest, opts ...grpc.CallOption) (*LookupAccountByNameResponse, error)
	LookupAccountBySid(ctx context.Context, in *LookupAccountBySidRequest, opts ...grpc.CallOption) (*LookupAccountBySidResponse, error)
}

type secauthzClient struct {
	cc grpc.ClientConnInterface
}

func NewSecauthzClient(cc grpc.ClientConnInterface) SecauthzClient {
	return &secauthzClient{cc}
}

func (c *secauthzClient) LookupAccountByName(ctx context.Context, in *LookupAccountByNameRequest, opts ...grpc.CallOption) (*LookupAccountByNameResponse, error) {
	out := new(LookupAccountByNameResponse)
	err := c.cc.Invoke(ctx, "/services.secauthz.Secauthz/LookupAccountByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secauthzClient) LookupAccountBySid(ctx context.Context, in *LookupAccountBySidRequest, opts ...grpc.CallOption) (*LookupAccountBySidResponse, error) {
	out := new(LookupAccountBySidResponse)
	err := c.cc.Invoke(ctx, "/services.secauthz.Secauthz/LookupAccountBySid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecauthzServer is the server API for Secauthz service.
// All implementations must embed UnimplementedSecauthzServer
// for forward compatibility
type SecauthzServer interface {
	LookupAccountByName(context.Context, *LookupAccountByNameRequest) (*LookupAccountByNameResponse, error)
	LookupAccountBySid(context.Context, *LookupAccountBySidRequest) (*LookupAccountBySidResponse, error)
	mustEmbedUnimplementedSecauthzServer()
}

// UnimplementedSecauthzServer must be embedded to have forward compatible implementations.
type UnimplementedSecauthzServer struct {
}

func (UnimplementedSecauthzServer) LookupAccountByName(context.Context, *LookupAccountByNameRequest) (*LookupAccountByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupAccountByName not implemented")
}
func (UnimplementedSecauthzServer) LookupAccountBySid(context.Context, *LookupAccountBySidRequest) (*LookupAccountBySidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupAccountBySid not implemented")
}
func (UnimplementedSecauthzServer) mustEmbedUnimplementedSecauthzServer() {}

// UnsafeSecauthzServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecauthzServer will
// result in compilation errors.
type UnsafeSecauthzServer interface {
	mustEmbedUnimplementedSecauthzServer()
}

func RegisterSecauthzServer(s grpc.ServiceRegistrar, srv SecauthzServer) {
	s.RegisterService(&Secauthz_ServiceDesc, srv)
}

func _Secauthz_LookupAccountByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupAccountByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecauthzServer).LookupAccountByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.secauthz.Secauthz/LookupAccountByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecauthzServer).LookupAccountByName(ctx, req.(*LookupAccountByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secauthz_LookupAccountBySid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupAccountBySidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecauthzServer).LookupAccountBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.secauthz.Secauthz/LookupAccountBySid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecauthzServer).LookupAccountBySid(ctx, req.(*LookupAccountBySidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Secauthz_ServiceDesc is the grpc.ServiceDesc for Secauthz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Secauthz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.secauthz.Secauthz",
	HandlerType: (*SecauthzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupAccountByName",
			Handler:    _Secauthz_LookupAccountByName_Handler,
		},
		{
			MethodName: "LookupAccountBySid",
			Handler:    _Secauthz_LookupAccountBySid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/secauthz/secauthz.proto",
}
